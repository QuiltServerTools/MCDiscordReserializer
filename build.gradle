plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'org.cadixdev.licenser' version '0.6.0'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()

    if (version.endsWith('-SNAPSHOT')) { // Permit snapshots only when the version is a snapshot
        maven {
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        }
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.author()
    options.encoding = 'UTF-8'
    options.addBooleanOption('html5', true)
    options.addBooleanOption('Xdoclint:none', true)
    failOnError = false
}

license {
    header = rootProject.file('LICENSE_HEADER')
    properties {
        String inception = '2018'
        String currentYear = Calendar.getInstance().get(Calendar.YEAR)

        year = inception == currentYear ? currentYear : inception + '-' + currentYear
    }
    include '**/*.java' // only java files
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    shade group: 'dev.vankka', name: 'SimpleAST', version: '2.2.7'

    testmodImplementation sourceSets.main.output
}

loom {
    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.testmod
        }
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.testmod
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}

jar {
    dependsOn licenseFormat
}

shadowJar {
    from "LICENSE"
    from sourceSets.main.output

    configurations = [project.configurations.shade]
    classifier = "dev-all"

    def relocPath = "io.github.quiltservertools.mcdiscordreserializer.libs."
    relocate "dev.vankka", relocPath + "dev.vankka"
}

java {
    withJavadocJar()
    withSourcesJar()
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
}

def env = System.getenv()

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
        if (env.MAVEN_URL) {
            maven {
                credentials {
                    username env.MAVEN_USERNAME
                    password env.MAVEN_PASSWORD
                }
                url env.MAVEN_URL
            }
        } else {
            mavenLocal()
        }
    }
}