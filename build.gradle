plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'org.cadixdev.licenser' version '0.6.0'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()

    if (version.endsWith('-SNAPSHOT')) { // Permit snapshots only when the version is a snapshot
        maven {
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
        }
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.author()
    options.encoding = 'UTF-8'
    options.addBooleanOption('html5', true)
    options.addBooleanOption('Xdoclint:none', true)
    failOnError = false
}

license {
    header = rootProject.file('LICENSE_HEADER')
    properties {
        String inception = '2018'
        String currentYear = Calendar.getInstance().get(Calendar.YEAR)

        year = inception == currentYear ? currentYear : inception + '-' + currentYear
    }
    include '**/*.java' // only java files
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    shade group: 'dev.vankka', name: 'SimpleAST', version: '2.2.7'

    testmodImplementation sourceSets.main.output
}

loom {
    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.testmod
        }
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.testmod
        }
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}

jar {
    dependsOn licenseFormat
}

shadowJar {
    from "LICENSE"
    from sourceSets.main.output

    configurations = [ project.configurations.shade ]
    classifier = "dev-all"

    def relocPath = "com.github.quiltservertools.mcdiscordreserializer.libs"
    relocate "dev.vankka", relocPath + "dev.vankka"
}

java {
    withJavadocJar()
    withSourcesJar()
}

remapJar {
    dependsOn(shadowJar)
    input.set(shadowJar.archivePath)
}

artifacts {
    archives jar, sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact remapJar
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'MC Discord Reserializer'
                artifactId = archivesBaseName
                packaging = 'jar'
                // optionally artifactId can be defined here
                description = 'A library for transcoding between Minecraft and Discord.'
                url = 'https://github.com/PotatoPresident/MCDiscordReserializer'

                scm {
                    connection = 'scm:git:git://github.com/PotatoPresident/MCDiscordReserializer.git'
                    developerConnection = 'scm:git:ssh://github.com/PotatoPresident/MCDiscordReserializer.git'
                    url = 'https://github.com/PotatoPresident/MCDiscordReserializer.git'
                }

                licenses {
                    license {
                        name = 'GNU General Public License, Version 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'Potatoboy'
                    }
                }
            }
        }
    }

    repositories {
        mavenLocal()
        def ossrhUsername = "Potatoboy9999"
        def ossrhPassword = (project.hasProperty("ossrhPassword") ? project.property("ossrhPassword") : System.getenv("OSSRH_PASSWORD")) as String
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials) {
                username = ossrhUsername
                password = ossrhPassword
            }
            name = "mavenCentral"
        }
    }
}